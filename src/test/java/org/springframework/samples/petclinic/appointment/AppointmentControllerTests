package org.springframework.samples.petclinic.appointment;

import org.assertj.core.util.Lists;
import org.hamcrest.BaseMatcher;
import org.hamcrest.Description;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.samples.petclinic.owner.*;
import org.springframework.samples.petclinic.visit.Visit;
import org.springframework.samples.petclinic.visit.VisitRepository;
import org.springframework.test.web.servlet.MockMvc;

import java.time.LocalDate;
import java.util.Collections;
import java.util.List;

import static org.hamcrest.Matchers.*;
import static org.mockito.BDDMockito.given;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(AppointmentController.class)
class AppointmentControllerTests {

    private static final int TEST_OWNER_ID = 1;
    private static final int TEST_PET_ID = 1;
    private static final int TEST_APPOINTMENT_ID = 11;

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private OwnerRepository owners;

    @MockBean
    private AppointmentRepository appointments;

    private int duration = 15;

    private Owner george;

    private Appointment appointment;

    @BeforeEach
    void setup() {

        george = new Owner();
        george.setId(TEST_OWNER_ID);
        george.setFirstName("George");
        george.setLastName("Franklin");
        george.setAddress("110 W. Liberty St.");
        george.setCity("Madison");
        george.setTelephone("6085551023");

        appointment = new Appointment();
        appointment.setId(TEST_APPOINTMENT_ID);
        appointment.setAppointmentDate(LocalDate.now());
        appointment.setDuration(15);
        appointment.setOwner(george);

        List<Appointment> appointments1 = null;
        appointments1.add(appointment);

        Pet max = new Pet();
        PetType dog = new PetType();
        dog.setName("dog");
        max.setId(1);
        max.setType(dog);
        max.setName("Max");
        max.setBirthDate(LocalDate.now());
        appointment.setPet(max);

        given(this.owners.findById(TEST_OWNER_ID)).willReturn(george);

        given(this.appointments.findById(TEST_APPOINTMENT_ID)).willReturn(appointment);
    }

    @Test
    void testInitCreationForm() throws Exception {
        mockMvc.perform(get("/appointments/new")).andExpect(status().isOk()).andExpect(model().attributeExists("appointment"))
                .andExpect(view().name("appointments/createOrUpdateAppointmentForm"));
    }

    @Test
    void testProcessCreationFormSuccess() throws Exception {
        mockMvc.perform(post("/appointments/new").param("id", "5").param("date", "30--07-09").param("duration", "15")
                .param("owner", "george"))
                .andExpect(status().is3xxRedirection());
    }
}
